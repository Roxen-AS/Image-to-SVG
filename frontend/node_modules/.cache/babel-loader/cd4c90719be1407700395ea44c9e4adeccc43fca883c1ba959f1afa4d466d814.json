{"ast":null,"code":"import { callOrIdentity, HeadersInitToPlainObject } from '../../lib/prelude.js';\nimport { parseBatchRequestArgs } from '../functions/batchRequests.js';\nimport { parseRawRequestArgs } from '../functions/rawRequest.js';\nimport { parseRequestArgs } from '../functions/request.js';\nimport { analyzeDocument } from '../helpers/analyzeDocument.js';\nimport { runRequest } from '../helpers/runRequest.js';\n/**\n * GraphQL Client.\n */\nexport class GraphQLClient {\n  url;\n  requestConfig;\n  constructor(url) {\n    let requestConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.url = url;\n    this.requestConfig = requestConfig;\n  }\n  /**\n   * Send a GraphQL query to the server.\n   */\n  rawRequest = (() => {\n    var _this = this;\n    return async function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      const [queryOrOptions, variables, requestHeaders] = args;\n      const rawRequestOptions = parseRawRequestArgs(queryOrOptions, variables, requestHeaders);\n      const {\n        headers,\n        fetch = globalThis.fetch,\n        method = `POST`,\n        requestMiddleware,\n        responseMiddleware,\n        excludeOperationName,\n        ...fetchOptions\n      } = _this.requestConfig;\n      const {\n        url\n      } = _this;\n      if (rawRequestOptions.signal !== undefined) {\n        fetchOptions.signal = rawRequestOptions.signal;\n      }\n      const document = analyzeDocument(rawRequestOptions.query, excludeOperationName);\n      const response = await runRequest({\n        url,\n        request: {\n          _tag: `Single`,\n          document,\n          variables: rawRequestOptions.variables\n        },\n        headers: {\n          ...HeadersInitToPlainObject(callOrIdentity(headers)),\n          ...HeadersInitToPlainObject(rawRequestOptions.requestHeaders)\n        },\n        fetch,\n        method,\n        fetchOptions,\n        middleware: requestMiddleware\n      });\n      if (responseMiddleware) {\n        await responseMiddleware(response, {\n          operationName: document.operationName,\n          variables,\n          url: _this.url\n        });\n      }\n      if (response instanceof Error) {\n        throw response;\n      }\n      return response;\n    };\n  })();\n  async request(documentOrOptions) {\n    for (var _len2 = arguments.length, variablesAndRequestHeaders = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      variablesAndRequestHeaders[_key2 - 1] = arguments[_key2];\n    }\n    const [variables, requestHeaders] = variablesAndRequestHeaders;\n    const requestOptions = parseRequestArgs(documentOrOptions, variables, requestHeaders);\n    const {\n      headers,\n      fetch = globalThis.fetch,\n      method = `POST`,\n      requestMiddleware,\n      responseMiddleware,\n      excludeOperationName,\n      ...fetchOptions\n    } = this.requestConfig;\n    const {\n      url\n    } = this;\n    if (requestOptions.signal !== undefined) {\n      fetchOptions.signal = requestOptions.signal;\n    }\n    const analyzedDocument = analyzeDocument(requestOptions.document, excludeOperationName);\n    const response = await runRequest({\n      url,\n      request: {\n        _tag: `Single`,\n        document: analyzedDocument,\n        variables: requestOptions.variables\n      },\n      headers: {\n        ...HeadersInitToPlainObject(callOrIdentity(headers)),\n        ...HeadersInitToPlainObject(requestOptions.requestHeaders)\n      },\n      fetch,\n      method,\n      fetchOptions,\n      middleware: requestMiddleware\n    });\n    if (responseMiddleware) {\n      await responseMiddleware(response, {\n        operationName: analyzedDocument.operationName,\n        variables: requestOptions.variables,\n        url: this.url\n      });\n    }\n    if (response instanceof Error) {\n      throw response;\n    }\n    return response.data;\n  }\n  async batchRequests(documentsOrOptions, requestHeaders) {\n    const batchRequestOptions = parseBatchRequestArgs(documentsOrOptions, requestHeaders);\n    const {\n      headers,\n      excludeOperationName,\n      ...fetchOptions\n    } = this.requestConfig;\n    if (batchRequestOptions.signal !== undefined) {\n      fetchOptions.signal = batchRequestOptions.signal;\n    }\n    const analyzedDocuments = batchRequestOptions.documents.map(_ref => {\n      let {\n        document\n      } = _ref;\n      return analyzeDocument(document, excludeOperationName);\n    });\n    const expressions = analyzedDocuments.map(_ref2 => {\n      let {\n        expression\n      } = _ref2;\n      return expression;\n    });\n    const hasMutations = analyzedDocuments.some(_ref3 => {\n      let {\n        isMutation\n      } = _ref3;\n      return isMutation;\n    });\n    const variables = batchRequestOptions.documents.map(_ref4 => {\n      let {\n        variables\n      } = _ref4;\n      return variables;\n    });\n    const response = await runRequest({\n      url: this.url,\n      request: {\n        _tag: `Batch`,\n        operationName: undefined,\n        query: expressions,\n        hasMutations,\n        variables\n      },\n      headers: {\n        ...HeadersInitToPlainObject(callOrIdentity(headers)),\n        ...HeadersInitToPlainObject(batchRequestOptions.requestHeaders)\n      },\n      fetch: this.requestConfig.fetch ?? globalThis.fetch,\n      method: this.requestConfig.method || `POST`,\n      fetchOptions,\n      middleware: this.requestConfig.requestMiddleware\n    });\n    if (this.requestConfig.responseMiddleware) {\n      await this.requestConfig.responseMiddleware(response, {\n        operationName: undefined,\n        variables,\n        url: this.url\n      });\n    }\n    if (response instanceof Error) {\n      throw response;\n    }\n    return response.data;\n  }\n  setHeaders(headers) {\n    this.requestConfig.headers = headers;\n    return this;\n  }\n  /**\n   * Attach a header to the client. All subsequent requests will have this header.\n   */\n  setHeader(key, value) {\n    const {\n      headers\n    } = this.requestConfig;\n    if (headers) {\n      // todo what if headers is in nested array form... ?\n      // @ts-expect-error todo\n      headers[key] = value;\n    } else {\n      this.requestConfig.headers = {\n        [key]: value\n      };\n    }\n    return this;\n  }\n  /**\n   * Change the client endpoint. All subsequent requests will send to this endpoint.\n   */\n  setEndpoint(value) {\n    this.url = value;\n    return this;\n  }\n}","map":{"version":3,"names":["callOrIdentity","HeadersInitToPlainObject","parseBatchRequestArgs","parseRawRequestArgs","parseRequestArgs","analyzeDocument","runRequest","GraphQLClient","url","requestConfig","constructor","arguments","length","undefined","rawRequest","_this","_len","args","Array","_key","queryOrOptions","variables","requestHeaders","rawRequestOptions","headers","fetch","globalThis","method","requestMiddleware","responseMiddleware","excludeOperationName","fetchOptions","signal","document","query","response","request","_tag","middleware","operationName","Error","documentOrOptions","_len2","variablesAndRequestHeaders","_key2","requestOptions","analyzedDocument","data","batchRequests","documentsOrOptions","batchRequestOptions","analyzedDocuments","documents","map","_ref","expressions","_ref2","expression","hasMutations","some","_ref3","isMutation","_ref4","setHeaders","setHeader","key","value","setEndpoint"],"sources":["/workspaces/Image-to-SVG/frontend/node_modules/graphql-request/src/legacy/classes/GraphQLClient.ts"],"sourcesContent":["import type { TypedDocumentNode } from '@graphql-typed-document-node/core'\nimport { callOrIdentity, HeadersInitToPlainObject } from '../../lib/prelude.js'\nimport type { BatchRequestDocument, BatchRequestsOptions, BatchResult } from '../functions/batchRequests.js'\nimport { parseBatchRequestArgs } from '../functions/batchRequests.js'\nimport { parseRawRequestArgs } from '../functions/rawRequest.js'\nimport { parseRequestArgs } from '../functions/request.js'\nimport { analyzeDocument } from '../helpers/analyzeDocument.js'\nimport { runRequest } from '../helpers/runRequest.js'\nimport type { RequestDocument, RequestOptions, VariablesAndRequestHeadersArgs } from '../helpers/types.js'\nimport {\n  type GraphQLClientResponse,\n  type RawRequestOptions,\n  type RequestConfig,\n  type Variables,\n} from '../helpers/types.js'\n\n/**\n * GraphQL Client.\n */\nexport class GraphQLClient {\n  constructor(\n    private url: string,\n    public readonly requestConfig: RequestConfig = {},\n  ) {}\n\n  /**\n   * Send a GraphQL query to the server.\n   */\n  rawRequest: RawRequestMethod = async <\n    T,\n    $Variables extends Variables = Variables,\n  >(\n    ...args: RawRequestMethodArgs<$Variables>\n  ): Promise<GraphQLClientResponse<T>> => {\n    const [queryOrOptions, variables, requestHeaders] = args\n    const rawRequestOptions = parseRawRequestArgs<$Variables>(\n      queryOrOptions,\n      variables,\n      requestHeaders,\n    )\n    const {\n      headers,\n      fetch = globalThis.fetch,\n      method = `POST`,\n      requestMiddleware,\n      responseMiddleware,\n      excludeOperationName,\n      ...fetchOptions\n    } = this.requestConfig\n    const { url } = this\n    if (rawRequestOptions.signal !== undefined) {\n      fetchOptions.signal = rawRequestOptions.signal\n    }\n\n    const document = analyzeDocument(\n      rawRequestOptions.query,\n      excludeOperationName,\n    )\n\n    const response = await runRequest({\n      url,\n      request: {\n        _tag: `Single`,\n        document,\n        variables: rawRequestOptions.variables,\n      },\n      headers: {\n        ...HeadersInitToPlainObject(callOrIdentity(headers)),\n        ...HeadersInitToPlainObject(rawRequestOptions.requestHeaders),\n      },\n      fetch,\n      method,\n      fetchOptions,\n      middleware: requestMiddleware,\n    })\n\n    if (responseMiddleware) {\n      await responseMiddleware(response, {\n        operationName: document.operationName,\n        variables,\n        url: this.url,\n      })\n    }\n\n    if (response instanceof Error) {\n      throw response\n    }\n\n    return response\n  }\n\n  /**\n   * Send a GraphQL document to the server.\n   */\n  // dprint-ignore\n  async request<T, V extends Variables = Variables>(document: RequestDocument | TypedDocumentNode<T, V>, ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>): Promise<T>\n  async request<T, V extends Variables = Variables>(options: RequestOptions<V, T>): Promise<T>\n  async request<T, V extends Variables = Variables>(\n    documentOrOptions:\n      | RequestDocument\n      | TypedDocumentNode<T, V>\n      | RequestOptions<V>,\n    ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>\n  ): Promise<T> {\n    const [variables, requestHeaders] = variablesAndRequestHeaders\n    const requestOptions = parseRequestArgs(\n      documentOrOptions,\n      variables,\n      requestHeaders,\n    )\n\n    const {\n      headers,\n      fetch = globalThis.fetch,\n      method = `POST`,\n      requestMiddleware,\n      responseMiddleware,\n      excludeOperationName,\n      ...fetchOptions\n    } = this.requestConfig\n    const { url } = this\n    if (requestOptions.signal !== undefined) {\n      fetchOptions.signal = requestOptions.signal\n    }\n\n    const analyzedDocument = analyzeDocument(\n      requestOptions.document,\n      excludeOperationName,\n    )\n\n    const response = await runRequest({\n      url,\n      request: {\n        _tag: `Single`,\n        document: analyzedDocument,\n        variables: requestOptions.variables,\n      },\n      headers: {\n        ...HeadersInitToPlainObject(callOrIdentity(headers)),\n        ...HeadersInitToPlainObject(requestOptions.requestHeaders),\n      },\n      fetch,\n      method,\n      fetchOptions,\n      middleware: requestMiddleware,\n    })\n\n    if (responseMiddleware) {\n      await responseMiddleware(response, {\n        operationName: analyzedDocument.operationName,\n        variables: requestOptions.variables,\n        url: this.url,\n      })\n    }\n\n    if (response instanceof Error) {\n      throw response\n    }\n\n    return response.data\n  }\n\n  /**\n   * Send GraphQL documents in batch to the server.\n   */\n  async batchRequests<\n    $BatchResult extends BatchResult,\n    $Variables extends Variables = Variables,\n  >(\n    documents: BatchRequestDocument<$Variables>[],\n    requestHeaders?: HeadersInit,\n  ): Promise<$BatchResult>\n  async batchRequests<\n    $BatchResult extends BatchResult,\n    $Variables extends Variables = Variables,\n  >(options: BatchRequestsOptions<$Variables>): Promise<$BatchResult>\n  async batchRequests<\n    $BatchResult extends BatchResult,\n    $Variables extends Variables = Variables,\n  >(\n    documentsOrOptions:\n      | BatchRequestDocument<$Variables>[]\n      | BatchRequestsOptions<$Variables>,\n    requestHeaders?: HeadersInit,\n  ): Promise<$BatchResult> {\n    const batchRequestOptions = parseBatchRequestArgs<$Variables>(\n      documentsOrOptions,\n      requestHeaders,\n    )\n    const { headers, excludeOperationName, ...fetchOptions } = this.requestConfig\n\n    if (batchRequestOptions.signal !== undefined) {\n      fetchOptions.signal = batchRequestOptions.signal\n    }\n\n    const analyzedDocuments = batchRequestOptions.documents.map(\n      ({ document }) => analyzeDocument(document, excludeOperationName),\n    )\n    const expressions = analyzedDocuments.map(({ expression }) => expression)\n    const hasMutations = analyzedDocuments.some(({ isMutation }) => isMutation)\n    const variables = batchRequestOptions.documents.map(\n      ({ variables }) => variables,\n    )\n\n    const response = await runRequest({\n      url: this.url,\n      request: {\n        _tag: `Batch`,\n        operationName: undefined,\n        query: expressions,\n        hasMutations,\n        variables,\n      },\n      headers: {\n        ...HeadersInitToPlainObject(callOrIdentity(headers)),\n        ...HeadersInitToPlainObject(batchRequestOptions.requestHeaders),\n      },\n      fetch: this.requestConfig.fetch ?? globalThis.fetch,\n      method: this.requestConfig.method || `POST`,\n      fetchOptions,\n      middleware: this.requestConfig.requestMiddleware,\n    })\n\n    if (this.requestConfig.responseMiddleware) {\n      await this.requestConfig.responseMiddleware(response, {\n        operationName: undefined,\n        variables,\n        url: this.url,\n      })\n    }\n\n    if (response instanceof Error) {\n      throw response\n    }\n\n    return response.data\n  }\n\n  setHeaders(headers: HeadersInit): this {\n    this.requestConfig.headers = headers\n    return this\n  }\n\n  /**\n   * Attach a header to the client. All subsequent requests will have this header.\n   */\n  setHeader(key: string, value: string): this {\n    const { headers } = this.requestConfig\n\n    if (headers) {\n      // todo what if headers is in nested array form... ?\n      // @ts-expect-error todo\n      headers[key] = value\n    } else {\n      this.requestConfig.headers = { [key]: value }\n    }\n\n    return this\n  }\n\n  /**\n   * Change the client endpoint. All subsequent requests will send to this endpoint.\n   */\n  setEndpoint(value: string): this {\n    this.url = value\n    return this\n  }\n}\n\ninterface RawRequestMethod {\n  <T, V extends Variables = Variables>(\n    query: string,\n    variables?: V,\n    requestHeaders?: HeadersInit,\n  ): Promise<GraphQLClientResponse<T>>\n  <T, V extends Variables = Variables>(options: RawRequestOptions<V>): Promise<\n    GraphQLClientResponse<T>\n  >\n}\n\ntype RawRequestMethodArgs<V extends Variables> =\n  | [query: string, variables?: V, requestHeaders?: HeadersInit]\n  | [RawRequestOptions<V>]\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
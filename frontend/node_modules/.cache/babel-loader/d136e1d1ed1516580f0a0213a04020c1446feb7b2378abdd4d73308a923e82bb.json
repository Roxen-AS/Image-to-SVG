{"ast":null,"code":"import { GraphQLClient } from '../classes/GraphQLClient.js';\n/**\n * Send a batch of GraphQL Document to the GraphQL server for execution.\n *\n * @example\n *\n * ```ts\n * // You can pass a raw string\n *\n * await batchRequests('https://foo.bar/graphql', [\n * {\n *  query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * },\n * {\n *   query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * }])\n *\n * // You can also pass a GraphQL DocumentNode as query. Convenient if you\n * // are using graphql-tag package.\n *\n * import gql from 'graphql-tag'\n *\n * await batchRequests('https://foo.bar/graphql', [{ query: gql`...` }])\n * ```\n */\nexport const batchRequests = async function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  const params = parseBatchRequestsArgsExtended(args);\n  const client = new GraphQLClient(params.url);\n  return client.batchRequests(params);\n};\nexport const parseBatchRequestsArgsExtended = args => {\n  if (args.length === 1) {\n    return args[0];\n  } else {\n    return {\n      url: args[0],\n      documents: args[1],\n      requestHeaders: args[2],\n      signal: undefined\n    };\n  }\n};\nexport const parseBatchRequestArgs = (documentsOrOptions, requestHeaders) => {\n  // eslint-disable-next-line\n  return documentsOrOptions.documents ? documentsOrOptions : {\n    documents: documentsOrOptions,\n    requestHeaders: requestHeaders,\n    signal: undefined\n  };\n};","map":{"version":3,"names":["GraphQLClient","batchRequests","_len","arguments","length","args","Array","_key","params","parseBatchRequestsArgsExtended","client","url","documents","requestHeaders","signal","undefined","parseBatchRequestArgs","documentsOrOptions"],"sources":["/workspaces/Image-to-SVG/frontend/node_modules/graphql-request/src/legacy/functions/batchRequests.ts"],"sourcesContent":["import { GraphQLClient } from '../classes/GraphQLClient.js'\nimport type { RequestDocument, Variables } from '../helpers/types.js'\n\nexport type BatchRequestDocument<V extends Variables = Variables> = {\n  document: RequestDocument\n  variables?: V\n}\n\nexport interface BatchRequestsOptions<V extends Variables = Variables> {\n  documents: BatchRequestDocument<V>[]\n  requestHeaders?: HeadersInit\n  signal?: RequestInit['signal']\n}\n\nexport interface BatchRequestsExtendedOptions<V extends Variables = Variables> extends BatchRequestsOptions<V> {\n  url: string\n}\n\n/**\n * Send a batch of GraphQL Document to the GraphQL server for execution.\n *\n * @example\n *\n * ```ts\n * // You can pass a raw string\n *\n * await batchRequests('https://foo.bar/graphql', [\n * {\n *  query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * },\n * {\n *   query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * }])\n *\n * // You can also pass a GraphQL DocumentNode as query. Convenient if you\n * // are using graphql-tag package.\n *\n * import gql from 'graphql-tag'\n *\n * await batchRequests('https://foo.bar/graphql', [{ query: gql`...` }])\n * ```\n */\nexport const batchRequests: BatchRequests = async (...args: BatchRequestsArgs) => {\n  const params = parseBatchRequestsArgsExtended(args)\n  const client = new GraphQLClient(params.url)\n  return client.batchRequests(params)\n}\n\ntype BatchRequestsArgs =\n  | [url: string, documents: BatchRequestDocument[], requestHeaders?: HeadersInit]\n  | [options: BatchRequestsExtendedOptions]\n\nexport const parseBatchRequestsArgsExtended = (args: BatchRequestsArgs): BatchRequestsExtendedOptions => {\n  if (args.length === 1) {\n    return args[0]\n  } else {\n    return {\n      url: args[0],\n      documents: args[1],\n      requestHeaders: args[2],\n      signal: undefined,\n    }\n  }\n}\n\n// dprint-ignore\ninterface BatchRequests {\n  <T extends BatchResult, V extends Variables = Variables>(url: string, documents: BatchRequestDocument<V>[], requestHeaders?: HeadersInit): Promise<T>\n  <T extends BatchResult, V extends Variables = Variables>(options: BatchRequestsExtendedOptions<V>): Promise<T>\n}\n\nexport type BatchResult = [Result, ...Result[]]\n\ninterface Result<Data extends object = object> {\n  data: Data\n}\n\nexport const parseBatchRequestArgs = <V extends Variables = Variables>(\n  documentsOrOptions: BatchRequestDocument<V>[] | BatchRequestsOptions<V>,\n  requestHeaders?: HeadersInit,\n): BatchRequestsOptions<V> => {\n  // eslint-disable-next-line\n  return (documentsOrOptions as BatchRequestsOptions<V>).documents\n    ? (documentsOrOptions as BatchRequestsOptions<V>)\n    : {\n      documents: documentsOrOptions as BatchRequestDocument<V>[],\n      requestHeaders: requestHeaders,\n      signal: undefined,\n    }\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,6BAA6B;AAkB3D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,OAAO,MAAMC,aAAa,GAAkB,eAAAA,CAAA,EAAqC;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAA3BC,IAAuB,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAAvBF,IAAuB,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;EAAA;EAC3E,MAAMC,MAAM,GAAGC,8BAA8B,CAACJ,IAAI,CAAC;EACnD,MAAMK,MAAM,GAAG,IAAIV,aAAa,CAACQ,MAAM,CAACG,GAAG,CAAC;EAC5C,OAAOD,MAAM,CAACT,aAAa,CAACO,MAAM,CAAC;AACrC,CAAC;AAMD,OAAO,MAAMC,8BAA8B,GAAIJ,IAAuB,IAAkC;EACtG,IAAIA,IAAI,CAACD,MAAM,KAAK,CAAC,EAAE;IACrB,OAAOC,IAAI,CAAC,CAAC,CAAC;EAChB,CAAC,MAAM;IACL,OAAO;MACLM,GAAG,EAAEN,IAAI,CAAC,CAAC,CAAC;MACZO,SAAS,EAAEP,IAAI,CAAC,CAAC,CAAC;MAClBQ,cAAc,EAAER,IAAI,CAAC,CAAC,CAAC;MACvBS,MAAM,EAAEC;KACT;EACH;AACF,CAAC;AAcD,OAAO,MAAMC,qBAAqB,GAAGA,CACnCC,kBAAuE,EACvEJ,cAA4B,KACD;EAC3B;EACA,OAAQI,kBAA8C,CAACL,SAAS,GAC3DK,kBAA8C,GAC/C;IACAL,SAAS,EAAEK,kBAA+C;IAC1DJ,cAAc,EAAEA,cAAc;IAC9BC,MAAM,EAAEC;GACT;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
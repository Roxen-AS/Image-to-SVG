{"ast":null,"code":"/**\n * Convenience passthrough template tag to get the benefits of tooling for the gql template tag. This does not actually parse the input into a GraphQL DocumentNode like graphql-tag package does. It just returns the string with any variables given interpolated. Can save you a bit of performance and having to install another package.\n *\n * @example\n * ```\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n * ```\n *\n * @remarks\n *\n * Several tools in the Node GraphQL ecosystem are hardcoded to specially treat any template tag named \"gql\". For example see this prettier issue: https://github.com/prettier/prettier/issues/4360. Using this template tag has no runtime effect beyond variable interpolation.\n */\nexport const gql = function (chunks) {\n  for (var _len = arguments.length, variables = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    variables[_key - 1] = arguments[_key];\n  }\n  return chunks.reduce((acc, chunk, index) => `${acc}${chunk}${index in variables ? String(variables[index]) : ``}`, ``);\n};","map":{"version":3,"names":["gql","chunks","_len","arguments","length","variables","Array","_key","reduce","acc","chunk","index","String"],"sources":["/workspaces/Image-to-SVG/frontend/node_modules/graphql-request/src/legacy/functions/gql.ts"],"sourcesContent":["/**\n * Convenience passthrough template tag to get the benefits of tooling for the gql template tag. This does not actually parse the input into a GraphQL DocumentNode like graphql-tag package does. It just returns the string with any variables given interpolated. Can save you a bit of performance and having to install another package.\n *\n * @example\n * ```\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n * ```\n *\n * @remarks\n *\n * Several tools in the Node GraphQL ecosystem are hardcoded to specially treat any template tag named \"gql\". For example see this prettier issue: https://github.com/prettier/prettier/issues/4360. Using this template tag has no runtime effect beyond variable interpolation.\n */\nexport const gql = (chunks: TemplateStringsArray, ...variables: unknown[]): string => {\n  return chunks.reduce(\n    (acc, chunk, index) => `${acc}${chunk}${index in variables ? String(variables[index]) : ``}`,\n    ``,\n  )\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;AAcA,OAAO,MAAMA,GAAG,GAAG,SAAAA,CAACC,MAA4B,EAAqC;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAhCC,SAAoB,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAApBF,SAAoB,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;EAAA;EACvE,OAAON,MAAM,CAACO,MAAM,CAClB,CAACC,GAAG,EAAEC,KAAK,EAAEC,KAAK,KAAK,GAAGF,GAAG,GAAGC,KAAK,GAAGC,KAAK,IAAIN,SAAS,GAAGO,MAAM,CAACP,SAAS,CAACM,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,EAC5F,EAAE,CACH;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}